version: '3.9'

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: 127.0.0.1:5000/geonode:4.0
  # restart: on-failure
  env_file:
    - .env
  volumes:
    # - '.:/usr/src/geonode'
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp
  depends_on:
    - db
    - geoserver

# Common template for service restart policy
x-common-swarm-deploy:
  &default-common-swarm-deploy
  replicas: 1
  restart_policy:
    # condition: any
    delay: 10s
    max_attempts: 20
    window: 60s

services:

  # Our custom django application. It includes Geonode.
  django:
    <<: *default-common-django
    deploy: *default-common-swarm-deploy
    # build:
    #   context: ./
    #   dockerfile: Dockerfile
    # container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    environment:
      - IS_CELERY=False
    entrypoint: [ "/usr/src/geonode/entrypoint.sh" ]
    command: "uwsgi --ini /usr/src/geonode/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    <<: *default-common-django
    deploy: *default-common-swarm-deploy
    image: 127.0.0.1:5000/geonode:4.0
    # container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      - django
    environment:
      - IS_CELERY=True
    entrypoint: [ "/usr/src/geonode/entrypoint.sh" ]
    command: "celery-cmd"

  data-dir-conf:
    image: 127.0.0.1:5000/geoserver_data:2.20.6
    # container_name: gsconf4${COMPOSE_PROJECT_NAME}
    entrypoint: sleep infinity
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    # restart: on-failure
    healthcheck:
      test: "ls -A '/geoserver_data/data' | wc -l"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    deploy: *default-common-swarm-deploy
    image: 127.0.0.1:5000/nginx:4.0
    # build: ./scripts/docker/nginx/
    # container_name: nginx4${COMPOSE_PROJECT_NAME}
    environment:
      # - HTTPS_HOST=${HTTPS_HOST}
      # - HTTPS_PORT=${HTTPS_PORT}
      - HTTPS_HOST=
      - HTTPS_PORT=443
      # - HTTP_HOST=${HTTP_HOST}
      # - HTTP_PORT=${HTTP_PORT}
      - HTTP_HOST=localhost
      - HTTP_PORT=80
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - 80:80
      # - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    # restart: on-failure

  # Gets and installs letsencrypt certificates
  letsencrypt:
    deploy: *default-common-swarm-deploy
    image: geonode/letsencrypt:4.0
    # build: ./scripts/docker/letsencrypt/
    # container_name: letsencrypt4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - nginx-certificates:/geonode-certificates
    # restart: on-failure

  # Geoserver backend
  geoserver:
    deploy: 
      replicas: 1
      restart_policy:
        # condition: any
        delay: 60s
        max_attempts: 20
        window: 60s
    image: 127.0.0.1:5000/geoserver:2.20.6
    # build: ./scripts/docker/geoserver/
    environment:
      DOCKER_HOST_IP: "localhost"
    # container_name: geoserver4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      start_period: 120s
      interval: 60s
      timeout: 10s
      retries: 10
    env_file:
      - .env
    volumes:
      - geoserver-data-dir:/geoserver_data/data
      - statics:/mnt/volumes/statics
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp
    # ports:
    #  - "8080:8080"
    # restart: on-failure
    depends_on:
      # - data-dir-conf
      - db

  # # Geoserver master backend
  # geoserver-master:
  #   deploy: 
  #     replicas: 1
  #     restart_policy:
  #       # condition: any
  #       delay: 60s
  #       max_attempts: 20
  #       window: 60s
  #   image: 127.0.0.1:5000/geoserver:2.20.6
  #   # build: ./scripts/docker/geoserver/
  #   environment:
  #     DOCKER_HOST_IP: "localhost"
  #   # container_name: geoserver4${COMPOSE_PROJECT_NAME}
  #   healthcheck:
  #     test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
  #     start_period: 120s
  #     interval: 60s
  #     timeout: 10s
  #     retries: 10
  #   env_file:
  #     - .env
  #   volumes:
  #     - geoserver-data-dir:/geoserver_data/data
  #     - statics:/mnt/volumes/statics
  #     - backup-restore:/backup_restore
  #     - data:/data
  #     - tmp:/tmp
  #   # ports:
  #   #  - "8080:8080"
  #   # restart: on-failure
  #   depends_on:
  #     # - data-dir-conf
  #     - db

  # PostGIS database.
  db:
    deploy: *default-common-swarm-deploy
    # use geonode official postgis 13 image
    image: geonode/postgis:13
    # command: postgres -c "max_connections=${POSTGRESQL_MAX_CONNECTIONS}"
    # container_name: db4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    # restart: on-failure
    healthcheck:
      test: "pg_isready -d postgres -U postgres"
    # uncomment to enable remote connections to postgres
    ports:
     - "5432:5432"

    # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    deploy: *default-common-swarm-deploy
    image: rabbitmq:3.7-alpine
    # container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    # restart: on-failure

  # amqbroker:
  #   image: geonode-amqbroker:latest
  #   # build: ./scripts/docker/amqbroker/
  #   # container_name: amqbroker4${COMPOSE_PROJECT_NAME}
  #   volumes:
  #     - geoserver-data-dir:/geoserver_data/data
  #   # restart: on-failure
  #   # env_file:
  #   #   - .env
  #   ports:
  #     - "61666:8080"
  #   depends_on:
  #     # - db
  #     - data-dir-conf

  # NCAnode service needed for EDT
  ncanode:
    image: malikzh/ncanode
    build: ./ncanode/
    ports:
      - "14579:14579"
    restart: on-failure

volumes:
  statics:
    name: statics
  nginx-confd:
    name: nginxconfd
  nginx-certificates:
    name: nginxcerts
  geoserver-data-dir:
    name: gsdatadir
  dbdata:
    name: dbdata
  dbbackups:
    name: dbbackups
  backup-restore:
    name: backup-restore
  data:
    name: data
  tmp:
    name: tmp
  rabbitmq:
    name: rabbitmq
# volumes:
#   statics:
#     name: ${COMPOSE_PROJECT_NAME}-statics
#   nginx-confd:
#     name: ${COMPOSE_PROJECT_NAME}-nginxconfd
#   nginx-certificates:
#     name: ${COMPOSE_PROJECT_NAME}-nginxcerts
#   geoserver-data-dir:
#     name: ${COMPOSE_PROJECT_NAME}-gsdatadir
#   dbdata:
#     name: ${COMPOSE_PROJECT_NAME}-dbdata
#   dbbackups:
#     name: ${COMPOSE_PROJECT_NAME}-dbbackups
#   backup-restore:
#     name: ${COMPOSE_PROJECT_NAME}-backup-restore
#   data:
#     name: ${COMPOSE_PROJECT_NAME}-data
#   tmp:
#     name: ${COMPOSE_PROJECT_NAME}-tmp
#   rabbitmq:
#     name: ${COMPOSE_PROJECT_NAME}-rabbitmq
